/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hietoaqua;

import com.itextpdf.awt.DefaultFontMapper;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Element;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Font;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.html.WebColors;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;


public class Agregar_Precipitaciones extends javax.swing.JFrame {
    ArrayList<Double> listaPrecipitaciones = new ArrayList<>();
    ArrayList <Double> precipitación_Acumulada = new ArrayList<>();
    String hora1_S,hora2_S;
    static int rango = 0;    
    DefaultTableModel tblPre, tblPre2;
    /**
     * Creates new form Agregar_precipitaciones
     */
    public Agregar_Precipitaciones() {
        initComponents();
        this.setLocationRelativeTo(null);
        txtHora_recib1.setVisible(false);
        txtHora_recib2.setVisible(false); 
        txtHora_recib1_0.setVisible(false);
        txtHora_recib2_0.setVisible(false);        
        txt_fecha.setVisible(false);
    }
    Inicio inicio = new Inicio();
    funciones f = new funciones();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtHoras = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtMed_Precipi = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblMed_Precipi_recibi = new javax.swing.JLabel();
        txtHora_recib1 = new javax.swing.JTextField();
        txtHora_recib2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAcumulado = new javax.swing.JTable();
        txtHora_recib1_0 = new javax.swing.JTextField();
        txtHora_recib2_0 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_maximos = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txt_Nom_Estacion = new javax.swing.JTextField();
        txt_fecha = new javax.swing.JTextField();
        txt_lati = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_longi = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtHoras.setEditable(false);
        txtHoras.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N

        jLabel1.setText("--→");

        txtMed_Precipi.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txtMed_Precipi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMed_PrecipiKeyTyped(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Hora:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Precipitación:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Agregar valores de precipitaciones:");

        txtHora_recib1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txtHora_recib1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHora_recib1ActionPerformed(evt);
            }
        });
        txtHora_recib1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHora_recib1KeyTyped(evt);
            }
        });

        txtHora_recib2.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txtHora_recib2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHora_recib2KeyTyped(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Calcular");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Acumulado por horas");

        tblAcumulado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblAcumulado.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblAcumulado);

        txtHora_recib1_0.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txtHora_recib1_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHora_recib1_0ActionPerformed(evt);
            }
        });
        txtHora_recib1_0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHora_recib1_0KeyTyped(evt);
            }
        });

        txtHora_recib2_0.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        txtHora_recib2_0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtHora_recib2_0KeyTyped(evt);
            }
        });

        tbl_maximos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "            "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_maximos.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tbl_maximos);
        if (tbl_maximos.getColumnModel().getColumnCount() > 0) {
            tbl_maximos.getColumnModel().getColumn(0).setResizable(false);
            tbl_maximos.getColumnModel().getColumn(0).setPreferredWidth(140);
        }

        jButton3.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jButton3.setText("← Atrás");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton4.setText("Gráficos →");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel6.setText("Nombre de la estación:");

        jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel7.setText("Latitud:");

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel8.setText("Longitud:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtHora_recib1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton3)
                                    .addComponent(jLabel6))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_Nom_Estacion, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtHora_recib2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(30, 30, 30)
                                                .addComponent(jButton2)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtHora_recib2_0, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                                            .addComponent(txt_fecha)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1))
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtMed_Precipi, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblMed_Precipi_recibi, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                                        .addComponent(txtHora_recib1_0, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_longi, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_lati, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(txtHora_recib1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(txtMed_Precipi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMed_Precipi_recibi, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(txtHora_recib1_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHora_recib2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtHora_recib2_0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txt_Nom_Estacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_lati, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txt_longi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            hora1_S = txtHora_recib1.getText();
            hora2_S = txtHora_recib2.getText(); 
            int hora1 = Integer.parseInt(hora1_S);
            int hora2 = Integer.parseInt(hora2_S);
            if(txtMed_Precipi.getText().equals("")){
                JOptionPane.showMessageDialog(null,"Introduzca el valor de la precipitación");
            }else{           
                if(hora1<=hora2){
                    String valor = txtMed_Precipi.getText();
                    double valorDec = Double.parseDouble(valor);
                    listaPrecipitaciones.add(valorDec);
                    hora1++;
                    txtHoras.setText(" ");
                    txtHoras.setText(hora1 + ":00");          
                    System.out.println("hora1 contador: "+hora1);
                }else{
                    JOptionPane.showMessageDialog(null,"Ya no hay más horas");
                }
                txtHora_recib1.setText(hora1 + "");
                txtMed_Precipi.setText(""); 
            }   
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Error: " +e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtHora_recib1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHora_recib1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHora_recib1KeyTyped

    private void txtHora_recib2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHora_recib2KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHora_recib2KeyTyped

    private void txtHora_recib1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHora_recib1ActionPerformed
    }//GEN-LAST:event_txtHora_recib1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            tblPre = (DefaultTableModel)tblAcumulado.getModel();
            tblPre2 = (DefaultTableModel)tbl_maximos.getModel();
            //TableColumnModel tblAcumulado_f = tblAcumulado.getColumnModel();
            tblPre.setRowCount(0);
            tblPre2.setRowCount(0);
            tblPre.setColumnCount(0);
            tblPre2.setColumnCount(0);
            DecimalFormat df = new DecimalFormat("0.000");
            
            precipitación_Acumulada.add(listaPrecipitaciones.get(0));
            
            double profundidad_maxima1 = listaPrecipitaciones.get(0);
            double profundidad_maxima2 = Math.round(((listaPrecipitaciones.get(0) + listaPrecipitaciones.get(1))*100)/100);
            double profundidad_maxima3 = 0;
            double profundidad_maxima4 = 0;           
            hora1_S = txtHora_recib1_0.getText();
            hora2_S = txtHora_recib2_0.getText(); 
            int hora1 = Integer.parseInt(hora1_S);
            int hora2 = Integer.parseInt(hora2_S);
            rango = hora2-hora1+1;
            System.out.println("rango: "+ rango);
            for(int i=0;i<rango-1;i++){
                switch (i) {
                    case 0:
                        tblPre.addColumn("Precipitación\n" + " acumulada");
                        tblPre.addColumn("Total en 1 hora");
                        tblPre.addColumn("Total en 2 horas"); 
                        Object row1[] = {df.format(precipitación_Acumulada.get(i)), df.format(listaPrecipitaciones.get(i))};
                        precipitación_Acumulada.add((precipitación_Acumulada.get(i) + listaPrecipitaciones.get(i+1)));
                        Object row2[] = {df.format(precipitación_Acumulada.get(i+1)), df.format(listaPrecipitaciones.get(i+1)), df.format(listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1))};
                        
                        tblPre2.addColumn("");
                        tblPre2.addColumn("En 1 hora");
                        tblPre2.addColumn("En 2 horas");
                        if(listaPrecipitaciones.get(i)>profundidad_maxima1){
                            profundidad_maxima1 = listaPrecipitaciones.get(i);
                        }
                        if(listaPrecipitaciones.get(i+1)>profundidad_maxima1){
                            profundidad_maxima1 = listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1)>profundidad_maxima2){
                            profundidad_maxima2 = listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1);
                        }    
                        
                        tblPre.addRow(row1);
                        tblPre.addRow(row2);                       
                        break;
                    case 1:
                        profundidad_maxima3 = listaPrecipitaciones.get(0) + listaPrecipitaciones.get(1) + listaPrecipitaciones.get(2);
                        tblPre.addColumn("Total en 3 horas");
                        precipitación_Acumulada.add((precipitación_Acumulada.get(i) + listaPrecipitaciones.get(i+1)));
                        Object row3[] = {df.format(precipitación_Acumulada.get(i+1)), df.format(listaPrecipitaciones.get(i+1)), df.format(listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)),
                            df.format(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1))};
                        
                        tblPre2.addColumn("En 3 horas");
                        if(listaPrecipitaciones.get(i+1)>profundidad_maxima1){
                            profundidad_maxima1 = listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1)>profundidad_maxima2){
                            profundidad_maxima2 = listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)>profundidad_maxima3){
                            profundidad_maxima3 = listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1);
                        }
                        
                        tblPre.addRow(row3);
                        break;
                    case 2:
                        precipitación_Acumulada.add((precipitación_Acumulada.get(i) + listaPrecipitaciones.get(i+1)));
                        Object row4[] = {df.format(precipitación_Acumulada.get(i+1)), df.format(listaPrecipitaciones.get(i+1)), df.format(listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)),
                            df.format(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1))};
                        
                        if(listaPrecipitaciones.get(i+1)>profundidad_maxima1){
                            profundidad_maxima1 = listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1)>profundidad_maxima2){
                            profundidad_maxima2 = listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)>profundidad_maxima3){
                            profundidad_maxima3 = listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1);
                        }
                        
                        tblPre.addRow(row4);
                        break;
                    case 3:
                        precipitación_Acumulada.add((precipitación_Acumulada.get(i) + listaPrecipitaciones.get(i+1)));
                        Object row5[] = {df.format(precipitación_Acumulada.get(i+1)), df.format(listaPrecipitaciones.get(i+1)), df.format(listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)),
                            df.format(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1))};
                        
                        if(listaPrecipitaciones.get(i+1)>profundidad_maxima1){
                            profundidad_maxima1 = listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1)>profundidad_maxima2){
                            profundidad_maxima2 = listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)>profundidad_maxima3){
                            profundidad_maxima3 = listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1);
                        }
                        
                        tblPre.addRow(row5);
                        break;
                    case 4:
                        precipitación_Acumulada.add((precipitación_Acumulada.get(i) + listaPrecipitaciones.get(i+1)));
                        profundidad_maxima4 = listaPrecipitaciones.get(0) + listaPrecipitaciones.get(1) + listaPrecipitaciones.get(2) + listaPrecipitaciones.get(3)+ 
                                listaPrecipitaciones.get(4)+ listaPrecipitaciones.get(5);
                        tblPre.addColumn("Total en 6 horas");
                        Object row6[] = {df.format(precipitación_Acumulada.get(i+1)), df.format(listaPrecipitaciones.get(i+1)), df.format(listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)),
                            df.format(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)),
                            df.format(listaPrecipitaciones.get(i-4) + listaPrecipitaciones.get(i-3) + listaPrecipitaciones.get(i-2) + listaPrecipitaciones.get(i-1) +
                                    listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1))};
                        
                        tblPre2.addColumn("En 6 horas");
                        if(listaPrecipitaciones.get(i+1)>profundidad_maxima1){
                            profundidad_maxima1 = listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1)>profundidad_maxima2){
                            profundidad_maxima2 = listaPrecipitaciones.get(i)+ listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)>profundidad_maxima3){
                            profundidad_maxima3 = listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1);
                        }
                        if(listaPrecipitaciones.get(i-4) + listaPrecipitaciones.get(i-3) + listaPrecipitaciones.get(i-2) + listaPrecipitaciones.get(i-1) + 
                                listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)>profundidad_maxima4){
                            profundidad_maxima4 = listaPrecipitaciones.get(i-4) + listaPrecipitaciones.get(i-3) + listaPrecipitaciones.get(i-2) + listaPrecipitaciones.get(i-1) +
                                    listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1);
                        }
                        
                        tblPre.addRow(row6);
                        break;                   
                    default:
                        {
                            precipitación_Acumulada.add((precipitación_Acumulada.get(i) + listaPrecipitaciones.get(i+1)));
                            Object row7[] = {df.format(precipitación_Acumulada.get(i+1)), df.format(listaPrecipitaciones.get(i+1)), df.format(listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)),
                                df.format(listaPrecipitaciones.get(i-1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1)),
                                df.format(listaPrecipitaciones.get(i-4) + listaPrecipitaciones.get(i-3) + listaPrecipitaciones.get(i-2) + listaPrecipitaciones.get(i-1) +
                                        listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i+1))};
                            
                            if (listaPrecipitaciones.get(i + 1) > profundidad_maxima1) {
                                profundidad_maxima1 = listaPrecipitaciones.get(i + 1);
                            }
                            if (listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i + 1) > profundidad_maxima2) {
                                profundidad_maxima2 = listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i + 1);
                            }
                            if (listaPrecipitaciones.get(i - 1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i + 1) > profundidad_maxima3) {
                                profundidad_maxima3 = listaPrecipitaciones.get(i - 1) + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i + 1);
                            }
                            if (listaPrecipitaciones.get(i - 4) + listaPrecipitaciones.get(i - 3) + listaPrecipitaciones.get(i - 2) + listaPrecipitaciones.get(i - 1)
                                    + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i + 1) > profundidad_maxima4) {
                                profundidad_maxima4 = listaPrecipitaciones.get(i - 4) + listaPrecipitaciones.get(i - 3) + listaPrecipitaciones.get(i - 2) + listaPrecipitaciones.get(i - 1)
                                        + listaPrecipitaciones.get(i) + listaPrecipitaciones.get(i + 1);
                            }
                            
                            tblPre.addRow(row7);
                            break;
                        }
                }               
            }     
            double maximo_intensidad1 = profundidad_maxima1/1.0;
            double maximo_intensidad2 = profundidad_maxima2/2.0;
            double maximo_intensidad3 = profundidad_maxima3/3.0;
            double maximo_intensidad4 = profundidad_maxima4/6.0;
            Object rrooww1[] = {"Profundidad Máxima", df.format(profundidad_maxima1), df.format(profundidad_maxima2), df.format(profundidad_maxima3), df.format(profundidad_maxima4)};
            Object rrooww2[]={"Maximo intensidad", df.format(maximo_intensidad1), df.format(maximo_intensidad2), df.format(maximo_intensidad3), df.format(maximo_intensidad4)};
            tblPre2.addRow(rrooww1);
            tblPre2.addRow(rrooww2);
            /*for(int i = 0; i<tblAcumulado_f.getColumnCount(); i++){
                tblAcumulado_f.getColumn(i).setPreferredWidth(5);
            }*/
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtHora_recib1_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHora_recib1_0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHora_recib1_0ActionPerformed

    private void txtHora_recib1_0KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHora_recib1_0KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHora_recib1_0KeyTyped

    private void txtHora_recib2_0KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHora_recib2_0KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHora_recib2_0KeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        inicio.setVisible(true);
        this.dispose();
        JOptionPane.showMessageDialog(null,"Vuelve a ingresar las horas");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int width = (int) PageSize.A4.getWidth();
        int height = (int) (PageSize.A4.getHeight());
        Rectangle pagesize = new Rectangle( width, height );
        Document documento = new Document(pagesize, 50, 50, 50, 50);
        String medidas="";
        String lati = txt_lati.getText();
        String longi = txt_longi.getText();
        if(lblMed_Precipi_recibi.getText().equals("Pulgadas")){
            medidas = "plg";
        }else if(lblMed_Precipi_recibi.getText().equals("Milímetros")){
            medidas = "mm";
        }else if(lblMed_Precipi_recibi.getText().equals("Centímetros")){
            medidas = "cm";
        }else{
            medidas = "xd";
        }
        if(txt_Nom_Estacion.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Introduzca el nombre de la estación.");
        }else if(txt_lati.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Introduzca la latitud.");
        }else if(txt_longi.getText().equals("")){
            JOptionPane.showMessageDialog(null,"Introduzca la longitud.");
        }else{
            String nombre_esta = txt_Nom_Estacion.getText();
            hora1_S = txtHora_recib1_0.getText();
            int hora1 = Integer.parseInt(hora1_S);  
            String fecha_escogida = txt_fecha.getText();          
            try{               
                String ruta= System.getProperty("user.home");
                DefaultCategoryDataset ds = new DefaultCategoryDataset();            
                for(int i=0; i<rango; i++){
                    ds.addValue(listaPrecipitaciones.get(i), (hora1+i)+":00", "");
                }    
                JFreeChart jf = ChartFactory.createBarChart("Hietograma-Lluvia", "Tiempo (hrs)", "Precipitación " +"("+ medidas+")", ds, PlotOrientation.VERTICAL, true, true, true);  
                
                DefaultCategoryDataset ds2 = new DefaultCategoryDataset();            
                for(int i=0; i<rango; i++){
                    ds2.addValue(precipitación_Acumulada.get(i), (hora1+i)+":00", "");
                }    
                JFreeChart jf2 = ChartFactory.createBarChart("Hietograma-Acumulado", "Tiempo (hrs)", "Precipitación " +"("+ medidas+")", ds2, PlotOrientation.VERTICAL, true, true, true);
                /*-----------------PDF----------------------*/
                PdfWriter writer = PdfWriter.getInstance(documento, new FileOutputStream(ruta+"\\Desktop"+"\\"+nombre_esta+".pdf"));
                BaseFont consolas_B = BaseFont.createFont("fonts\\consolas\\CONSOLA.ttf", "Cp1252",  true);
                Font consolas = new Font(consolas_B);
                Font font_nomColum = new Font(FontFactory.getFont(BaseFont.HELVETICA, 12));
                
                Image logo = Image.getInstance("https://i.ibb.co/SsB7NgC/logo-hietoaqua.png");
                logo.scaleToFit(120, 120);
                logo.setAlignment(Chunk.ALIGN_LEFT);
                
                Paragraph parrafo = new Paragraph();
                parrafo.setAlignment(Paragraph.ALIGN_CENTER);
                parrafo.setFont(FontFactory.getFont(BaseFont.HELVETICA, 20, Font.BOLD));
                parrafo.add(" \n"+nombre_esta.toUpperCase()+"\n");   
                parrafo.add(" \n"+"Latitud: "+lati.toUpperCase()+"  Longitud: "+longi.toUpperCase()+" \n\n\n\n\n");
                
                Paragraph subtitulo = new Paragraph();
                subtitulo.setFont(FontFactory.getFont(BaseFont.HELVETICA, 17));       
                subtitulo.add("Acumulado por horas: \n\n\n\n");
                
                Paragraph fecha = new Paragraph();
                fecha.setAlignment(Paragraph.ALIGN_RIGHT);
                fecha.setFont(FontFactory.getFont(BaseFont.COURIER, 17));
                fecha.add("                                                  "+fecha_escogida);
                
                documento.open();
                documento.add(fecha);
                logo.setAbsolutePosition(25, 689);
                documento.add(logo);
                documento.add(parrafo); 
                documento.add(subtitulo);
                documento.addTitle("Hietograma_"+nombre_esta);
                //una pagina
                //tabla 1  
                PdfPTable table = new PdfPTable(tblPre.getColumnCount());
                int cols = tblPre.getColumnCount();
                int fils = tblPre.getRowCount();
                for(int j=0; j<cols; j++){
                    BaseColor myColor = WebColors.getRGBColor("#38acd0");
                    PdfPCell cell = new PdfPCell(new Phrase(tblPre.getColumnName(j), font_nomColum));  
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    cell.setBackgroundColor(myColor);
                    table.addCell(cell);
                }
                for(int i=0; i<fils; i++) {
                    for(int j=0; j<cols; j++){
                        PdfPCell cell = new PdfPCell(new Phrase((String) tblPre.getValueAt(i,j), consolas));
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        table.addCell(cell);
                    }
                }
           
                //tabla 2
                PdfPTable table2 = new PdfPTable(tblPre2.getColumnCount());
                int cols2 = tblPre2.getColumnCount();
                int fils2 = tblPre2.getRowCount();
                for(int j=0; j<cols2; j++){
                    PdfPCell cell = new PdfPCell(new Phrase(" "));
                    cell.setBackgroundColor(BaseColor.BLACK);
                    table.addCell(cell);
                }
                for(int i=0; i<fils2; i++) {
                    for(int j=0; j<cols2; j++){
                        PdfPCell cell = new PdfPCell(new Phrase((String) tblPre2.getValueAt(i,j), consolas));
                        cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        table.addCell(cell);
                    }
                }
                documento.add(table);  
                documento.add(table2);
                
                //OTRA PAGINA
                documento.newPage();
                PdfContentByte cb = writer.getDirectContent();
                PdfTemplate tp = cb.createTemplate( width, height );
                Graphics2D g2 = tp.createGraphics( width, height, new DefaultFontMapper() );
                Rectangle2D r2D = new Rectangle2D.Double(0, 0, width, ((height/2)-1) );
                jf.draw(g2, r2D);
                g2.dispose();
                cb.addTemplate(tp, 0, 0); 

                PdfContentByte cb2 = writer.getDirectContent();
                PdfTemplate tp2 = cb2.createTemplate( width, height );
                Graphics2D g22 = tp2.createGraphics( width, height, new DefaultFontMapper() );
                Rectangle2D r2D2 = new Rectangle2D.Double(0, 422, width, ((height/2)-1) );
                jf2.draw(g22, r2D2);
                g22.dispose();
                cb.addTemplate(tp2, 0, 0);
                documento.close();
                /*-----------------FIN PDF----------------------*/
                ChartFrame f = new ChartFrame("Gráfico H-Lluvia", jf);
                f.setSize(1000, 600);
                f.setLocationRelativeTo(null);
                f.setVisible(true);
                
                ChartFrame f2 = new ChartFrame("Gráfico H-Acumulado", jf2);
                f2.setSize(1000, 600);
                f2.setLocationRelativeTo(f);
                f2.setVisible(true);
            }catch(Exception e){
                JOptionPane.showMessageDialog(null,"error: " + e);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtMed_PrecipiKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMed_PrecipiKeyTyped
        // TODO add your handling code here:
        char validar = evt.getKeyChar();
        if(Character.isLetter(validar)){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Solo numeros");
        }
    }//GEN-LAST:event_txtMed_PrecipiKeyTyped

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
    }//GEN-LAST:event_jButton1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agregar_Precipitaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agregar_Precipitaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agregar_Precipitaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agregar_Precipitaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agregar_Precipitaciones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JLabel lblMed_Precipi_recibi;
    private javax.swing.JTable tblAcumulado;
    private javax.swing.JTable tbl_maximos;
    public static javax.swing.JTextField txtHora_recib1;
    public static javax.swing.JTextField txtHora_recib1_0;
    public static javax.swing.JTextField txtHora_recib2;
    public static javax.swing.JTextField txtHora_recib2_0;
    public javax.swing.JTextField txtHoras;
    private javax.swing.JTextField txtMed_Precipi;
    private javax.swing.JTextField txt_Nom_Estacion;
    public static javax.swing.JTextField txt_fecha;
    private javax.swing.JTextField txt_lati;
    private javax.swing.JTextField txt_longi;
    // End of variables declaration//GEN-END:variables
}
